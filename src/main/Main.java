package main;
/*
O que deve ser feito?

Voc√™ dever√° criar um loop de intera√ß√£o com o usu√°rio, perguntando se ele gostaria de ver os livros dispon√≠veis

Caso SIM: Ele dever√° escolher o id do livro, e ap√≥s isso inserir o nome, no final, uma mensagem dever√° ser
gerada, informando que o livro foi emprestado com sucesso.

Caso N√ÉO: O programa dever√° ser encerrado.

Funcionalidades do Sistema
- ADD model.Livro
- LISTAR Livros
- EMPRESTAR model.Livro
- DEVOLVER model.Livro
- REGISTRAR EMPRESTIMO DE LIVRO

Estrutura do Projeto

  LIVRO
    - **id**: Identificador √∫nico do livro
- **titulo**: T√≠tulo do livro
- **autor**: Autor do livro (objeto do tipo Autor)
- **disponivel**: Indica se o livro est√° dispon√≠vel para empr√©stimo
- dataCadastro: Data que o livro foi cadastrado
- dataAtualiza√ß√£o: Data que o livro foi atualizado


### Autor

- **id**: Identificador √∫nico do autor
- **nome**: Nome do autor
- dataNascimento: Nascimento do autor

### service.Biblioteca

- **livros**: Lista de livros na biblioteca
- autores: Lista de autores da biblioteca
- emprestimos: Lista de empr√©stimos da biblioteca



Uma dica para extruturar a  classe:
private List<model.Livro> livros = new ArrayList<>();
private List<Autor> autores = new ArrayList<>();
private List<Emprestimo> emprestimos = new ArrayList<>();

### Gerenciamento de Livros

- Apenas livros marcados como dispon√≠veis podem ser emprestados.
- O usu√°rio dever√° poder informar seu nome ao fazer empr√©stimo do livro

### Empr√©stimo de Livros

- Ao realizar um empr√©stimo, o livro escolhido deve ser marcado como indispon√≠vel e durante esta execu√ß√£o do programa N√ÉO
poder√° fazer o empr√©stimo do mesmo livro novamente.


## Indo al√©m

Algumas sugest√µes do que pode ser implementado:

- Cadastro de Clientes: crie uma classe model.Cliente para representar os usu√°rios da biblioteca, com atributos como id, nome, dataNascimento, e email.

    Implemente uma funcionalidade para listar todos os clientes cadastrados.
    Adicione a capacidade de associar empr√©stimos aos clientes, permitindo que voc√™ veja quais livros um cliente espec√≠fico emprestou e quando.

    Adicione uma funcionalidade para consultar o hist√≥rico de empr√©stimos de um livro ou cliente espec√≠fico, mostrando datas de empr√©stimo e devolu√ß√£o.

- Mantenha um registro de todos os empr√©stimos, incluindo os devolvidos.
- Implemente funcionalidades para buscar livros por t√≠tulo ou autor.
Adicione filtros para listar apenas livros de determinados g√™neros, ou livros que foram adicionados recentemente.
- Indo mais al√©m, voc√™ pode adicionar um menu, que ao iniciar o sistema, pergunta ao usu√°rio se ele quer cadastrar um
novo livro, por√©m para isso, dever√° inserir
todos os par√¢metros do livro, e ap√≥s adicionar, o livro ficar√° dispon√≠vel para empr√©stimo.


ESTRUTURA DO PROJETO




 */


import model.Autor;
import model.Cliente;
import model.Livro;
import service.Biblioteca;

import java.time.LocalDate;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Biblioteca biblioteca = new Biblioteca();

        // Dados iniciais para teste
        biblioteca.adicionarAutor(1, "Machado de Assis", LocalDate.of(1839, 6, 21));
        biblioteca.adicionarAutor(2, "Clarice Lispector", LocalDate.of(1920, 12, 10));
        biblioteca.adicionarCliente(1, "Jo√£o da Silva", LocalDate.of(1990, 5, 15), "joao.silva@verboconnectche.com.br");
        biblioteca.adicionarCliente(2, "Maria dos Pampas", LocalDate.of(1985, 3, 22), "maria.pampas@verboconnectche.com.br");
        biblioteca.adicionarLivro(1, "Dom Casmurro", 1);
        biblioteca.adicionarLivro(2, "A Paix√£o Segundo G.H.", 2);

        // Loop inicial: Pergunta se o usu√°rio quer ver os livros dispon√≠veis
        System.out.println("Bem-vindo ao Sistema de Gerenciamento de Biblioteca do Verbo Connect Ch√™ üßâ");
        System.out.print("Gostaria de ver os livros dispon√≠veis? (S/N): ");
        String resposta = scanner.nextLine().trim().toUpperCase();

        if (resposta.equals("S")) {
            int opcao = 0;
            while (opcao != 9) {
                System.out.println("\nMenu:");
                System.out.println("1. Adicionar Livro");
                System.out.println("2. Listar Livros");
                System.out.println("3. Listar Livros Dispon√≠veis");
                System.out.println("4. Emprestar Livro");
                System.out.println("5. Devolver Livro");
                System.out.println("6. Registrar Empr√©stimo de Livro");
                System.out.println("7. Listar Clientes");
                System.out.println("8. Buscar Livro por T√≠tulo");
                System.out.println("9. Hist√≥rico de Empr√©stimos de um Cliente");
                System.out.println("10. Sair");


                System.out.print("Digite a op√ß√£o desejada: ");
                opcao = scanner.nextInt();
                scanner.nextLine(); // Limpa o buffer

                try {
                    switch (opcao) {
                        case 1: // Adicionar Livro
                            System.out.print("Digite o ID do livro: ");
                            int idLivro = scanner.nextInt();
                            scanner.nextLine();
                            System.out.print("Digite o t√≠tulo do livro: ");
                            String titulo = scanner.nextLine();
                            System.out.print("Digite o ID do autor: ");
                            int idAutor = scanner.nextInt();
                            biblioteca.adicionarLivro(idLivro, titulo, idAutor);
                            break;

                        case 2: // Listar Livros
                            biblioteca.listarLivros();
                            break;

                        case 3: // Listar Livros Dispon√≠veis
                            biblioteca.listarLivrosDisponiveis();
                            break;

                        case 4: // Emprestar Livro
                            biblioteca.listarLivrosDisponiveis();
                            System.out.print("Digite o ID do livro para emprestar: ");
                            int livroId = scanner.nextInt();
                            System.out.print("Digite o ID do cliente: ");
                            int clienteId = scanner.nextInt();
                            biblioteca.emprestarLivro(livroId, clienteId);
                            break;

                        case 5: // Devolver Livro
                            System.out.print("Digite o ID do livro para devolver: ");
                            int livroDevolucaoId = scanner.nextInt();
                            biblioteca.devolverLivro(livroDevolucaoId);
                            break;

                        case 6: // Registrar Empr√©stimo
                            biblioteca.listarLivros();
                            System.out.print("Digite o ID do livro para registrar o empr√©stimo: ");
                            int livroRegistroId = scanner.nextInt();
                            System.out.print("Digite o ID do cliente: ");
                            int clienteRegistroId = scanner.nextInt();
                            biblioteca.registrarEmprestimo(livroRegistroId, clienteRegistroId);
                            break;

                        case 7: // Listar Clientes
                            biblioteca.listarClientes();
                            break;

                        case 8: // Buscar Livro por T√≠tulo
                            System.out.print("Digite o t√≠tulo (ou parte dele) para buscar: ");
                            String termo = scanner.nextLine();
                            biblioteca.buscarPorTitulo(termo);
                            break;

                        case 9: // Hist√≥rico de Empr√©stimos de um Cliente
                            System.out.print("Digite o ID do cliente para ver o hist√≥rico de empr√©stimos: ");
                            int clienteHistoricoId = scanner.nextInt();
                            biblioteca.historicoEmprestimosCliente(clienteHistoricoId);
                            break;

                        case 10: // Sair
                            System.out.println("Saindo do sistema. At√© logo, tch√™! üßâ");
                            break;



                        default:
                            System.out.println("Op√ß√£o inv√°lida! Escolha entre 1 e 9.");
                    }
                } catch (Exception e) {
                    System.out.println("Erro: " + e.getMessage());
                }
            }
        } else {
            System.out.println("Programa encerrado. At√© logo, tch√™! üßâ");
        }

        scanner.close();
    }
}